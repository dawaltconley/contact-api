AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  SAM template for handling contact form submissions.

Parameters:
  Email:
    Type: String
    Description: Email address to receive contact notifications.
  Required:
    Type: CommaDelimitedList
    Description: >-
      List of form field names to require in addition to 'subject' and 'message', which are always required.
      The function will return a 400 error if any of these are missing.
    Default: 'email'
  Honeypot:
    Type: CommaDelimitedList
    Description: List of honeypot form field names. These will cause the function to quietly abort.
    Default: ''
  ApiDomain:
    Type: String
    Description: Base domain where the api is hosted. Used to create an API Gateway custom domain name for this deployment.
    Default: ''
  ApiSubdomain:
    Type: String
    Description: Subdomain where the api is hosted. Used to create an API Gateway custom domain name for this deployment.
    Default: api
  ApiBasePath:
    Type: String
    Description: Base path of the custom domain where the API will be hosted.
    Default: ''
  CertificateArn:
    Type: String
    Description: Certificate Manager ARN for the ApiDomain certificate. Required to use a custom domain.
    Default: ''
  Route53Dns:
    Type: String
    Description: Whether this domain uses Route53 for its DNS
    Default: 'true'
    AllowedValues: ['true', 'false']
  AllowOrigin:
    Type: String
    Description: Passed directly to Access-Control-Allow-Origin header in the CORS configuration.
    Default: ''
  ApplicationLogLevel:
    Type: String
    AllowedValues: [TRACE, DEBUG, INFO, WARN, ERROR, FATAL]
    Default: INFO
  SystemLogLevel:
    Type: String
    AllowedValues: [DEBUG, INFO, WARN]
    Default: WARN
  LogFormat:
    Type: String
    AllowedValues: [Text, JSON]
    Default: Text

Conditions:
  HasApiSubdomain: !Not [!Equals [!Ref ApiSubdomain, '']]
  HasApiBasePath: !Not [!Equals [!Ref ApiBasePath, '']]
  HasCustomApiDomain: !And
    - !Not [!Equals [!Ref ApiDomain, '']]
    - !Not [!Equals [!Ref CertificateArn, '']]
  CorsEnabled: !Not [!Equals [!Ref AllowOrigin, '']]
  CreateRecordSetGroup: !And
    - !Condition HasCustomApiDomain
    - !Equals [!Ref Route53Dns, 'true']
  AllowsLogLevels: !Equals [!Ref LogFormat, 'JSON']

Resources:
  CustomDomain:
    Type: AWS::ApiGatewayV2::DomainName
    Condition: HasCustomApiDomain
    Properties:
      DomainName: !If
        - HasApiSubdomain
        - !Sub '${ApiSubdomain}.${ApiDomain}'
        - !Ref ApiDomain

      DomainNameConfigurations:
        - CertificateArn: !Ref CertificateArn
          SecurityPolicy: TLS_1_2

  CustomDomainMapping:
    Type: AWS::ApiGatewayV2::ApiMapping
    Condition: HasCustomApiDomain
    Properties:
      DomainName: !Ref CustomDomain
      ApiId: !Ref ContactApi
      Stage: Prod
      ApiMappingKey: !If [HasApiBasePath, !Ref ApiBasePath, !Ref AWS::NoValue]

  RecordSetGroup:
    Type: AWS::Route53::RecordSetGroup
    Condition: CreateRecordSetGroup
    Properties:
      HostedZoneName: !Sub '${ApiDomain}.'
      RecordSets:
        - Name: !Ref CustomDomain
          Type: A
          AliasTarget:
            HostedZoneId: !GetAtt CustomDomain.RegionalHostedZoneId
            DNSName: !GetAtt CustomDomain.RegionalDomainName

  ContactApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      Cors: !If
        - CorsEnabled
        - AllowMethods: "'GET,POST,OPTIONS'"
          AllowHeaders: "'Content-Type'"
          AllowOrigin: !Sub "'${AllowOrigin}'"
        - !Ref AWS::NoValue

  ContactFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: contact-form/
      Handler: app.lambdaHandler
      Runtime: nodejs18.x
      Architectures:
        - x86_64
      Timeout: 10
      Events:
        GetRequests:
          Type: Api
          Properties:
            Path: /contact
            Method: get
            RestApiId: !Ref ContactApi
        PostRequests:
          Type: Api
          Properties:
            Path: /contact
            Method: post
            RestApiId: !Ref ContactApi
      Policies:
        - SNSPublishMessagePolicy:
            TopicName: !GetAtt ContactTopic.TopicName
      Environment:
        Variables: # should probably be stage variables
          SNS_TOPIC_ARN: !GetAtt ContactTopic.TopicArn
          REQUIRED_FIELDS: !Join [',', !Ref Required]
          HONEYPOT_FIELDS: !Join [',', !Ref Honeypot]
          ALLOW_ORIGIN: !Ref AllowOrigin
      LoggingConfig: !If
        - AllowsLogLevels
        - LogFormat: !Ref LogFormat
          ApplicationLogLevel: !Ref ApplicationLogLevel
          SystemLogLevel: !Ref SystemLogLevel
        - LogFormat: !Ref LogFormat

    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: 'es2020'
        Sourcemap: true
        EntryPoints:
          - app.ts

  ContactTopic:
    Type: AWS::SNS::Topic
    Properties:
      Subscription:
        - Endpoint: !Ref Email
          Protocol: email

Outputs:
  ContactApi:
    Description: 'API Gateway endpoint URL'
    Value: !Sub 'https://${ContactApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/contact/'
  CustomDomainApi:
    Condition: HasCustomApiDomain
    Description: 'Custom domain API endpoint'
    Value: !Sub
      - 'https://${CustomDomain}${BasePath}/contact/'
      - BasePath: !If
          - HasApiBasePath
          - !Sub '/${ApiBasePath}'
          - ''
  ApiId:
    Description: 'API Gateway ID'
    Value: !Ref ContactApi
  ApiRootResourceId:
    Description: 'Root resource ID for API Gateway'
    Value: !GetAtt ContactApi.RootResourceId
