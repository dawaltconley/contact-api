AWSTemplateFormatVersion: '2010-09-09'
Transform:
  - 'AWS::LanguageExtensions'
  - 'AWS::Serverless-2016-10-31'
Description: >-
  SAM template for handling contact form submissions.

Metadata:
  cfn-lint:
    config:
      ignore_checks:
        - W3002 # ignore warnings about dependency on the `package` command
        - E0001 # false lint error for the !If statement in the ContactFunction Events. unfortunately disables other useful lint errors...

Parameters:
  # application settings
  Email:
    Type: String
    Description: Email address to receive contact notifications.
  Required:
    Type: CommaDelimitedList
    Description: >-
      List of form field names to require in addition to 'subject' and 'message', which are always required.
      The function will return a 400 error if any of these are missing.
    Default: 'email'
  Honeypot:
    Type: CommaDelimitedList
    Description: List of honeypot form field names. These will cause the function to quietly abort.
    Default: ''
  AllowOrigin:
    Type: String
    Description: Passed directly to Access-Control-Allow-Origin header in the CORS configuration.
    Default: ''
  CreateApi:
    Type: String
    Description: >-
      If true, creates a new serverless API resource for the contact lambda function.
      If false, creates resources that can be served from an API in another template.
    Default: 'true'
    AllowedValues:
      - 'true'
      - 'false'
  SubscriptionName:
    Type: String
    Description: Human-readable name for the SNS subscription topic.
    Default: ''

  # custom domain
  ApiDomain:
    Type: String
    Description: Custom domain where the api is hosted. Used to create an API Gateway custom domain name for this deployment.
    Default: ''
  ApiBasePath:
    Type: String
    Description: Base path of the custom domain where the API will be hosted.
    Default: ''
  CertificateArn:
    Type: String
    Description: Certificate Manager ARN for the ApiDomain certificate. If supplied with ApiDomain, will attempt to create a new custom domain using the two.
    Default: ''
  HostedZoneId:
    Type: String
    Description: If provided, creates a record set group connecting the custom domain to a Route53 zone.
    Default: ''
  HostedZoneName:
    Type: String
    Description: Can provide this as an alternative to HostedZoneId
    Default: ''

  # logs
  ApplicationLogLevel:
    Type: String
    AllowedValues: [TRACE, DEBUG, INFO, WARN, ERROR, FATAL]
    Default: INFO
  SystemLogLevel:
    Type: String
    AllowedValues: [DEBUG, INFO, WARN]
    Default: WARN
  LogFormat:
    Type: String
    AllowedValues: [Text, JSON]
    Default: Text

Conditions:
  CreateApi: !Equals [!Ref CreateApi, 'true']
  HasCustomDomain: !And
    - !Condition CreateApi
    - !Not [!Equals [!Ref ApiDomain, '']]
  HasApiBasePath: !Not [!Equals [!Ref ApiBasePath, '']]
  CreateCustomDomain: !And
    - !Condition HasCustomDomain
    - !Not [!Equals [!Ref CertificateArn, '']]
  CorsEnabled: !Not [!Equals [!Ref AllowOrigin, '']]
  AllowsLogLevels: !Equals [!Ref LogFormat, 'JSON']
  HasSubscriptionName: !Not [!Equals [!Ref SubscriptionName, '']]

Resources:
  CustomDomain:
    Type: AWS::CloudFormation::Stack
    Condition: CreateCustomDomain
    DependsOn:
      - ContactApi
    Properties:
      TemplateURL: ./node_modules/@dawaltconley/cfn-static-website/api-domain.template.yaml
      Parameters:
        ApiDomain: !Ref ApiDomain
        CertificateArn: !Ref CertificateArn
        HostedZoneId: !Ref HostedZoneId
        HostedZoneName: !Ref HostedZoneName

  CustomDomainMapping:
    Type: AWS::ApiGatewayV2::ApiMapping
    Condition: HasCustomDomain
    DependsOn:
      - ContactApiProdStage # SAM-created resource
    Properties:
      DomainName: !If
        - CreateCustomDomain
        - !GetAtt CustomDomain.Outputs.CustomDomain
        - !Ref ApiDomain
      ApiId: !Ref ContactApi
      Stage: Prod
      ApiMappingKey: !If [HasApiBasePath, !Ref ApiBasePath, !Ref AWS::NoValue]

  ContactApi:
    Type: AWS::Serverless::Api
    Condition: CreateApi
    Properties:
      StageName: Prod
      Cors: !If
        - CorsEnabled
        - AllowMethods: "'GET,POST,OPTIONS'"
          AllowHeaders: "'Content-Type'"
          AllowOrigin: !Sub "'${AllowOrigin}'"
        - !Ref AWS::NoValue

  ContactFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: contact-form/
      Handler: app.lambdaHandler
      Runtime: nodejs18.x
      Architectures:
        - x86_64
      Timeout: 10
      Events:
        GetRequests: !If
          - CreateApi
          - Type: Api
            Properties:
              Path: /contact
              Method: get
              RestApiId: !Ref ContactApi
          - !Ref AWS::NoValue
        PostRequests: !If
          - CreateApi
          - Type: Api
            Properties:
              Path: /contact
              Method: post
              RestApiId: !Ref ContactApi
          - !Ref AWS::NoValue
      Policies:
        - SNSPublishMessagePolicy:
            TopicName: !GetAtt ContactTopic.TopicName
      Environment:
        Variables: # should probably be stage variables
          SNS_TOPIC_ARN: !GetAtt ContactTopic.TopicArn
          REQUIRED_FIELDS: !Join [',', !Ref Required]
          HONEYPOT_FIELDS: !Join [',', !Ref Honeypot]
          ALLOW_ORIGIN: !Ref AllowOrigin
      LoggingConfig: !If
        - AllowsLogLevels
        - LogFormat: !Ref LogFormat
          ApplicationLogLevel: !Ref ApplicationLogLevel
          SystemLogLevel: !Ref SystemLogLevel
        - LogFormat: !Ref LogFormat
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: 'es2020'
        Sourcemap: true
        EntryPoints:
          - app.ts

  ContactTopic:
    Type: AWS::SNS::Topic
    Properties:
      Subscription:
        - Endpoint: !Ref Email
          Protocol: email
      DisplayName: !If
        - HasSubscriptionName
        - !Ref SubscriptionName
        - !Ref AWS::NoValue

Outputs:
  ContactApi:
    Condition: CreateApi
    Description: 'API Gateway endpoint URL'
    Value: !Sub 'https://${ContactApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/contact/'
  CustomDomainApi:
    Condition: HasCustomDomain
    Description: 'Custom domain API endpoint'
    Value: !Sub
      - 'https://${ApiDomain}${BasePath}/contact/'
      - BasePath: !If
          - HasApiBasePath
          - !Sub '/${ApiBasePath}'
          - ''
  ApiId:
    Condition: CreateApi
    Description: 'API Gateway ID'
    Value: !Ref ContactApi
  ApiRootResourceId:
    Condition: CreateApi
    Description: 'Root resource ID for API Gateway'
    Value: !GetAtt ContactApi.RootResourceId
  ApiStageName:
    Condition: CreateApi
    Value: Prod
  FunctionArn:
    Description: 'ARN for the contact lambda function.'
    Value: !GetAtt ContactFunction.Arn
  TopicArn:
    Description: 'ARN for the generated SNS topic.'
    Value: !GetAtt ContactTopic.TopicArn
